# -*- coding: utf-8 -*-
"""VeriGruplama-HuggingFace.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XXH7VJF83va3t-ZEuHxTd0aX1SQ5u0Vu
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install transformers #hugging face modeli
!pip install torch #pytorch modelin beyni, hesaplama yapıyor
!pip install Pillow #fotoğrafları açıp kullanabilmek için indiririz.Python tek başına yapamaz.

from transformers import pipeline #pipeline kısayoldur --> model yükleme, veriyi verme,sonucu alma
#hugging face modelini yükleriz
classifier = pipeline("image-classification",model = "openai/clip-vit-base-patch32") #hazır modeli çağırıyoruz

import os
input_folder = "/content/drive/MyDrive/images"
output_folder = "/content/drive/MyDrive/Classified/VisDrone_Train_Siniflandirilmis"

import os
import shutil
from transformers import pipeline

# 1. Modeli yükle (zaten yüklüyse hızlı geçer)
classifier = pipeline("image-classification", model="openai/clip-vit-base-patch32")

# 2. Klasör ayarları
input_folder = "/content/drive/MyDrive/images"
output_folder = "/content/drive/MyDrive/Classified/VisDrone_Train_Siniflandirilmis"  # <-- yeni klasör adı
os.makedirs(output_folder, exist_ok=True)

# 3. Sayacı başlat
counter = 1

# 4. Etiket belirleyen fonksiyon
def classify_labels(labels):
    hava_durumu = ""
    zaman_durumu = ""
    ortam_turu = ""

    # Önce hepsini küçük harfe çevir
    labels = [label.lower() for label in labels]

    # HAVA KOŞULU
    if any(word in labels for word in ["fog", "mist"]):
        hava_durumu = "sisli_"
    elif "snow" in labels or "snowy" in labels:
        hava_durumu = "karli_"
    elif "rain" in labels:
        hava_durumu = "yagmurlu_"
    # Normal ise boş kalır (yani hava koşulu etiketi olmaz)

    # ZAMAN / IŞIK DURUMU
    if "night" in labels:
        zaman_durumu = "gece_"
    elif "daytime" in labels or "sunny" in labels or "cloudy" in labels:
        zaman_durumu = "gunduz_"
    elif "thermal" in labels:
        zaman_durumu = "termal_"
    else:
        # Belirgin ışık bilgisi yoksa gece sayıyoruz (senin kuralına göre)
        zaman_durumu = "gece_"

    # ORTAM TÜRÜ
    if any(word in labels for word in ["building", "road", "car", "street"]):
        ortam_turu = "sehir"
    elif any(word in labels for word in ["forest", "trees", "jungle"]):
        ortam_turu = "orman"
    elif any(word in labels for word in ["sea", "ocean", "ship", "boat"]):
        ortam_turu = "deniz"
    elif any(word in labels for word in ["field", "open area", "plain", "meadow"]):
        ortam_turu = "acik_alan"
    else:
        ortam_turu = "belirsiz"  # hiçbir ortam bulunamazsa

    return hava_durumu + zaman_durumu + ortam_turu

# 5. Fotoğrafları sırayla işle
for file_name in sorted(os.listdir(input_folder)):
    file_path = os.path.join(input_folder, file_name)
    if not file_name.lower().endswith(('.png', '.jpg', '.jpeg')):
        continue

    try:
        # Fotoğrafı modelle tahmin et
        result = classifier(file_path)
        labels = [r['label'].lower() for r in result]

        # Ortam ismini belirle
        environment_name = classify_labels(labels)

        # Yeni dosya adı oluştur
        new_file_name = f"{environment_name} {counter:07d}.jpg"

        # Fotoğrafı yeni klasöre kopyala
        shutil.copy(file_path, os.path.join(output_folder, new_file_name))

        # Sayacı arttır
        counter += 1

        print(f"{file_name} -> {new_file_name}")  # ilerleme çıktısı
        print(f"İşleniyor: {file_name}")
        result = classifier(file_path)
        labels = [r['label'].lower() for r in result]
        print(f"Tahmin Edilen Etiketler: {labels}")

    except Exception as e:
        print(f"Hata oluştu {file_name} dosyasında: {e}")